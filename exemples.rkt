#lang racket
(provide (all-defined-out))
(require "fonctionb.rkt");recuperation des fonction
(define (exemple1)
  (define P1 (pointXY 200 400))
  (define P2 (pointXY 400 200))
  (define P3 (pointXY 200 200))
  (define P4 (pointXY 400 400))
  (define DA (droite2P P1 P2))
  (define DB (droite2P P3 P4))
  (define DT (droite2P (pointXY 400 400) (pointXY 400 450)))
  (define C1 (cercle3P P1 P2 P3))
  (define C2 (cercle3P P2 P3 P4))
  (define C3 (cercle3P P3 P4 P1))
  (define C4 (cercle3P P4 P1 P2))
  (cercle (intersection2D DA DB) 10))

(define (exemple2)
  (define P1 (pointXY 180 200))
  (define P2 (pointXY 420 200))
  (define P3 (pointXY 200 180))
  (define P4 (pointXY 200 420))
  (define SP1 (pointXY 420 400))
  (define SP2 (pointXY 400 420))
  (define D1 (droite2P P1 P2))
  (define D2 (droite2P P3 P4))
  (define D3 (parallele D1 SP1))
  (define D4 (parallele D2 SP2))
  (define I1 (intersection2D D1 D2))
  (define I2 (intersection2D D2 D3))
  (define I3 (intersection2D D3 D4))
  (define I4 (intersection2D D4 D1))
  (define S1 (segment I1 I3))
  (define S2 (segment I2 I4))
  (cercle I1 10)
  (cercle I2 10)
  (cercle I3 10)
  (cercle I4 10)
  (cercle (milieu S1) 10)
  )

(define (exemple3)
  (define C1 (cercle3P (point) (point) (point)))
  (define dessus (send C1 get-dessus))
  (define centre (send C1 get-centre))
  (define C2 (cercle2P centre dessus))
  (set! dessus (milieu (segment centre dessus)))
  (define C3 (cercle2P centre dessus))
  (set! dessus (milieu (segment centre dessus)))
  (define C4 (cercle2P centre dessus))
  (set! dessus (milieu (segment centre dessus)))
  (define C5 (cercle2P centre dessus))
  (set! dessus (milieu (segment centre dessus)))
  (define C6 (cercle2P centre dessus))
  C1
  )

(define (exemple4)
  (define a (point))
  (define b (point))
  (define s (segment a b))
  (define med (mediatrice s))
  (define par (parallele med (point)))
  (define per (perpendiculaire med (point)))
  (define c1 (cercle (intersection2D med per) 10))
  (define c2 (cercle (intersection2D par per) 10))
  per)

(define (exemple5)
  (define centre (pointXY 300 300))
  (define p1 (pointXY 300 50))
  (define p2 (pointXY 477 124))
  (define p3 (pointXY 550 300))
  (define p4 (pointXY 477 476))
  (define p5 (pointXY 300 550))
  (define p6 (pointXY 123 476))
  (define p7 (pointXY 50 300))
  (define p8 (pointXY 123 124))
  (cercle2P centre p1)
  (cercle2P centre p2)
  (cercle2P centre p3)
  (cercle2P centre p4)
  (cercle2P centre p5)
  (cercle2P centre p6)
  (cercle2P centre p7)
  (cercle2P centre p8)
  (droite2P centre p1)
  (droite2P centre p2)
  (droite2P centre p3)
  (droite2P centre p4)
  (droite2P centre p5)
  (droite2P centre p6)
  (droite2P centre p7)
  (droite2P centre p8)
  )

(define (exemple5bis n);avec n le nombre qui divisera pi qui sera l'ecart entre deux
  (define centre (pointXY 300 300))
  (define xCentre 300)
  (define yCentre 300)
  (define rayon 250)
  (define (iter acc)
    (if (> acc (* 2 pi))
        void
        (begin
          (let ((p (pointXY (+ (* (sin acc) rayon) xCentre) (+ (* (cos acc) rayon) yCentre))))
            (cercle2P centre p)
            (droite2P centre p)
            (iter (+ acc (/ pi n)))))))
  (iter 0))

(define (exemple6)
  (define S1 (segmentA))
  (define S2 (segment (send S1 get-a) (point)))
  (define S3 (segment (send S1 get-b) (send S2 get-b)))
  (define med1 (mediatrice S1))
  (define med2 (mediatrice S2))
  (define med3 (mediatrice S3))
  (cercle (intersection2D med1 med2) 10)
  (cercle (intersection2D med2 med3) 10)
  (cercle (intersection2D med3 med1) 10)
  (cercle3P (send S1 get-a) (send S1 get-b) (send S2 get-b))
  )


(define (exemple7)
  (define P1 (point))
  (define P2 (point))
  (define S1 (segment P1 P2))
  (define M (milieu S1))
  (define C1 (cercle2P P1 M))
  (define C2 (cercle2P P2 M))
  (define Med (mediatrice S1))
  (define PAR1 (parallele Med P1))
  (define PAR2 (parallele Med P2))
  (define c1 (cercle P1 7))
  (define c2 (cercle P2 7))
  (define c3 (cercle M 7))
  c3)